{"/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/test.js":"/* istanbul instrument in package npmtest_gulp_svg_symbols */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/lib.npmtest_gulp_svg_symbols.js":"/* istanbul instrument in package npmtest_gulp_svg_symbols */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_svg_symbols = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_svg_symbols = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-svg-symbols && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_svg_symbols */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_svg_symbols\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_svg_symbols.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_svg_symbols.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_svg_symbols.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_svg_symbols.__dirname + '/lib.npmtest_gulp_svg_symbols.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/node_modules/gulp-svg-symbols/index.js":"'use strict';\n\nvar _             = require('lodash');\nvar path          = require('path');\nvar gutil         = require('gulp-util');\nvar GulpError     = gutil.PluginError;\nvar warn          = gutil.colors.yellow;\nvar grey          = gutil.colors.grey;\nvar through       = require('through2');\nvar BPromise      = require('bluebird');\n\nvar defaults      = require('./lib/default-config');\nvar svg           = require('./lib/svg');\nvar templates     = require('./lib/templates.js');\nvar utils         = require('./lib/utils.js');\n\nvar PLUGIN_NAME   = utils.name;\nvar templatesPath = {\n  'default-svg':  path.join(__dirname, './templates/svg-symbols.svg'),\n  'default-css':  path.join(__dirname, './templates/svg-symbols.css'),\n  'default-demo': path.join(__dirname, './templates/svg-symbols-demo-page.html')\n};\n\nfunction gulpSvgSymbols(opts) {\n  opts = opts || {};\n  var buffer  = [];\n  var defs    = [];\n\n  // clone everything as we don't want to mutate anything\n  var options = _.defaults(_.cloneDeep(opts), _.cloneDeep(defaults));\n\n  // expand path to default templates\n  options.templates = options.templates.map(function (pathName) {\n    if (pathName in templatesPath) return templatesPath[pathName];\n    return pathName;\n  });\n\n  // buffer and transform every files\n  return through.obj(function transform(file, encoding, cb) {\n\n    if (file.isNull()) {\n      return cb(null, file);\n    }\n\n    // we don't handle streams :,(\n    // use https://github.com/nfroidure/gulp-streamify if you're reading this\n    // next versions should use https://www.npmjs.com/package/bufferstreams\n    if (file.isStream()) {\n      this.emit('error', new GulpError(PLUGIN_NAME, 'Streaming not supported'));\n      return cb();\n    }\n\n    svg.parseFile(file, options, function (result) {\n      buffer.push(result);\n      return cb(null);\n    });\n\n  // put all generated files back in the stream\n  }, function flush(cb) {\n    var that = this;\n\n    var svgData = buffer.map(function (svgRawData) {\n      // defs are not at an SVG level\n      // they should be handled globally to the new SVG file\n      if (svgRawData.defs) defs.push(svgRawData.defs);\n      delete svgRawData.defs;\n      //\n      return svg.formatForTemplate(svgRawData, options);\n    });\n    // force defs to have a value.\n    // better for templates to check if `false` rather than length…\n    defs = defs.length > 0 ? defs.join('\\n') : false;\n\n    var files = templates.renderAll(options.templates, {\n      svgClassname: options.svgClassname,\n      icons: svgData,\n      defs: defs,\n    });\n\n    function outputFiles(files) {\n      files.forEach(function (file) {\n        that.push(file);\n      });\n      cb();\n    }\n\n    BPromise.all(files).then(outputFiles);\n  });\n}\n\nmodule.exports = gulpSvgSymbols;\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/node_modules/gulp-svg-symbols/lib/default-config.js":"'use strict';\n\nmodule.exports = {\n  // class that will be added in default template root SVG\n  svgClassname: false,\n  // this will be used for generating SVG id and associated class names\n  id:         '%f',\n  className:  '.%f',\n  // Determine size in CSS (em/px)\n  fontSize:   0,\n  // debug log\n  warn:       true,\n  // accessibility title\n  title:      false,\n  // templates to render\n  templates: [\n    'default-svg',\n    'default-css'\n  ],\n  // slug params or custom function\n  slug: {},\n  // datas passed to templates while rendering\n  transformData: function (svg, defaultData, options) {\n    return defaultData;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/node_modules/gulp-svg-symbols/lib/svg.js":"'use strict';\n\nvar _       = require('lodash');\nvar slug    = require('speakingurl');\nvar path    = require('path');\nvar cheerio = require('cheerio');\n\nvar utils   = require('./utils');\n\n//\n// GATHER ELEMENTARY INFORMATIONS ABOUT THE SVG FILE\n//\n\nfunction parseFile(file, options, callback) {\n  var $       = cheerio.load(file.contents.toString(), {\n    normalizeWhitespace: true,\n    xmlMode: true\n  });\n  var $svg    = $('svg');\n  var attr    = $svg[0].attribs;\n  var viewBox = utils.viewboxToArray(attr.viewBox, file.path, options);\n  var name    = /(.*)\\.svg/.exec(path.basename(file.path))[1];\n\n  var result  = {\n    name:               name,\n    viewBox:            viewBox.join(' '),\n    originalAttributes: attr,\n    // SVG files might not have size\n    // https://github.com/Hiswe/gulp-svg-symbols/issues/10\n    width:    utils.sizeOrViewboxFallback(attr.width, viewBox[2]),\n    height:   utils.sizeOrViewboxFallback(attr.height, viewBox[3]),\n  };\n\n  // ID generation\n  // spaces in IDs or Classes are never a good idea\n  if (_.isFunction(options.slug)) {\n    // let user add his custom parsing function…\n    result.id = options.slug(name);\n  } else if (_.isPlainObject(options.slug)) {\n    // …or pass custom option to speakingurl\n    result.id = slug(name, options.slug);\n  } else {\n    result.id = slug(name);\n  }\n\n  // STYLE handling\n  var $style      = $svg.find('style');\n  if ($style.length) {\n    result.style  = $style.html().trim();\n    // don't format more than adding newlines after each rules end\n    result.style  = result.style.replace(/}\\s*(?!\\n)/g, '}\\n');\n  }\n  $style.remove();\n\n  // DEFS handling\n  var $defs      = $svg.find('defs');\n  if ($defs.children().length) {\n    result.defs  = $defs.html();\n  }\n  $defs.remove();\n\n  // CONTENT\n  // only optim is to remove empty group\n  // but shouldn't be done: SVG Symbol should only do concat SVG files\n  $svg.find('g').each(function () {\n    if (!$(this).children().length) $(this).remove();\n  });\n\n  result.content = $svg.html();\n\n  return callback(result);\n}\n\n//\n// MODIFY DATAS BEFORE GIVING IT TO TEMPLATES\n//\n\nfunction formatForTemplate(svgRawData, options) {\n  var result        = {};\n  // this can be overrided by user transformData function\n  var tmplDatas     = {\n    id:         utils.dynamicText(options.id, svgRawData.id),\n    className:  utils.dynamicText(options.className, svgRawData.id),\n    width:      utils.cssSize(svgRawData.width, options.fontSize),\n    height:     utils.cssSize(svgRawData.height, options.fontSize),\n  };\n  // It should be handled by a custom template or custom transformData\n  if (options.title !== false && !/<title>/.test(svgRawData.content)) {\n    tmplDatas.title = utils.dynamicText(options.title, svgRawData.name);\n  }\n\n  // Styles coming from <style /> are kept in the SVG file\n  // we don't take care of duplicated styles or anything else\n  if (svgRawData.style) tmplDatas.style = svgRawData.style;\n\n  // Apply TransformData option\n  // no need to be able to call transformData inside transformData %)\n  result      = options.transformData(svgRawData, tmplDatas, _.omit(options, [\n    'transformData',\n    'templates'\n  ]));\n  // Always keep a reference of the original datas\n  result.svg  = svgRawData;\n\n  return result;\n}\n\nmodule.exports = {\n  parseFile:          parseFile,\n  formatForTemplate:  formatForTemplate,\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/node_modules/gulp-svg-symbols/lib/utils.js":"'use strict';\n\nvar _             = require('lodash');\nvar path          = require('path');\nvar gutil         = require('gulp-util');\nvar warn          = gutil.colors.yellow;\nvar grey          = gutil.colors.grey;\nvar File          = gutil.File;\nvar PLUGIN_NAME   = 'gulp-svg-symbols';\n\n// Format a size to px or em\nfunction cssSize(size, fontSize) {\n  var unit = 'px';\n  if (_.isNumber(fontSize) && fontSize > 0) {\n    unit = 'em';\n  }\n  if (unit === 'px') {\n    return size + 'px';\n  }\n  return _.round(size / fontSize, 3) + 'em';\n}\n\nfunction dynamicText(template, name) {\n  return template.replace('%f', name);\n}\n\nfunction viewboxToArray(viewbox, name, options) {\n  if (_.isUndefined(viewbox)) {\n    if (options.warn) {\n      gutil.log(warn(PLUGIN_NAME), grey('viewbox missing in file'), name);\n    }\n    return [0, 0, 100, 100];\n  }\n\n  return viewbox.split(' ').map(function (value) {\n    return parseFloat(value, 10);\n  });\n}\n\nfunction sizeOrViewboxFallback(size, fallback) {\n  // no size -> get viewbox fallback\n  if (_.isUndefined(size)) {\n    return fallback;\n  }\n  // handle percent svg size -> get viewbox fallback\n  // https://github.com/Hiswe/gulp-svg-symbols/issues/24\n  if (/\\d+%/.test(size)) {\n    return (parseInt(size, 10) * fallback) / 100;\n  }\n  return parseInt(size, 10);\n}\n\nfunction createFile(name, contents) {\n  return new File({\n    cwd:  './',\n    base: './',\n    path: name,\n    contents: new Buffer(contents)\n  });\n}\n\nmodule.exports = {\n  cssSize:                cssSize,\n  dynamicText:            dynamicText,\n  viewboxToArray:         viewboxToArray,\n  sizeOrViewboxFallback:  sizeOrViewboxFallback,\n  createFile:             createFile,\n  name:                   PLUGIN_NAME,\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-symbols/node_modules/gulp-svg-symbols/lib/templates.js":"'use strict';\n\nvar path                    = require('path');\nvar consolidate             = require('consolidate');\nconsolidate.requires.lodash = require('lodash');\nvar tmpl                    = consolidate.lodash;\nvar BPromise                = require('bluebird');\nvar utils                   = require('./utils');\n\nvar render = function render(template, datas, callback) {\n  var name = path.basename(template);\n  var svgContent = tmpl(template, datas, function (err, result) {\n    if (err) return callback(err, result);\n    callback(null, utils.createFile(name, result));\n  });\n};\n\nrender = BPromise.promisify(render);\n\nfunction renderAll(templates, datas) {\n  return templates.map(function (template) {\n    return render(template, datas);\n  });\n}\n\nmodule.exports = {\n  renderAll:  renderAll,\n  render:     render,\n};\n"}